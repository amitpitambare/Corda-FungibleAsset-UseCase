import net.corda.plugins.Cordform

apply plugin: 'java'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

jar.baseName = "cordapp-gsk-workflows"

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()
    workflow {
        name "CorDapp GSK"
        vendor "Corda Open Source"
        licence "Apache License, Version 2.0"
        versionId 1
    }
}

sourceSets {
    main {
        resources {
            srcDir "../config/dev"
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    testImplementation "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    testImplementation "$corda_release_group:corda-node-driver:$corda_release_version"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"

    // CorDapp dependencies.
    cordapp project(":contracts-java")
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task deployNodes(type: Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        cordapp project(":contracts-java")
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort  10001
       //p2pAddress "54.67.25.206:10001"
        rpcSettings {
            address("localhost:10002")
            adminAddress("localhost:10003")
        }
        projectCordapp {
            deploy = false
        }
        cordapps.clear()
    }
    node {
        name "O=GSK,L=US,C=US"
        p2pPort  10004
      // p2pAddress "13.57.48.122:10004"
        rpcSettings {
            address("localhost:10005")
            adminAddress("localhost:10006")
        }
        extraConfig = [
                // Setting the JMX reporter type.
                jmxReporterType: 'JOLOKIA',
                // Setting the H2 address.
                h2Settings: [ address: 'localhost:10019' ]
        ]

        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=ABC Health Plan,L=US,C=US"
        p2pPort  10007
       // p2pAddress "13.56.16.112:10007"
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10014")
        }
        extraConfig = [
                // Setting the H2 address.
                h2Settings: [ address: 'localhost:10018' ]
        ]

        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
       name "O=ThirdParty,L=US,C=US"
       p2pPort  10008
      // p2pAddress "54.193.24.57:10008"
      rpcSettings {
         address("localhost:10015")
         adminAddress("localhost:10016")
      }
       extraConfig = [
               // Setting the H2 address.
             h2Settings: [ address: 'localhost:10017' ]
        ]

        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
   }
}
